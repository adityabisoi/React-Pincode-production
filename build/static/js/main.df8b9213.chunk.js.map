{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Pincode","props","state","pincode","city","e","this","setState","target","name","value","length","axios","get","then","res","data","PostOffice","State","Region","document","getElementById","classList","remove","catch","err","className","style","Container","pincodeContainer","maxLength","minLength","onChange","placeholder","id","pincodeInput","cityContainer","type","disabled","cityInput","stateContainer","stateInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"8RA2EeA,G,kBAvEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,GACTC,KAAM,GACNF,MAAO,IANQ,E,sEASVG,GAAI,IAAD,OACVC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,QACZ,IAA1BL,EAAEG,OAAOE,MAAMC,QACjBC,IACGC,IADH,+CAC+CR,EAAEG,OAAOE,QACrDI,MAAK,SAAAC,GAAG,OACP,EAAKR,SAAS,CACZL,MAAOa,EAAIC,KAAK,GAAGC,WAAW,GAAGC,MACjCd,KAAMW,EAAIC,KAAK,GAAGC,WAAW,GAAGE,YAGnCL,MAAK,WACJM,SAASC,eAAe,WAAWC,UAAUC,OAAO,YAErDC,OAAM,SAAAC,GACLL,SAASC,eAAe,WAAWK,UAAY,WAGjDrB,EAAEG,OAAOE,MAAMC,OAAS,GAC1BL,KAAKC,SAAS,CACZH,KAAM,GACNF,MAAO,O,+BAIH,IAAD,OACP,OACE,yBAAKyB,MAAOrB,KAAKL,MAAM2B,WACrB,yBAAKD,MAAOrB,KAAKL,MAAM4B,kBACrB,2BACEC,UAAW,EACXC,UAAW,EACXC,SAAU,SAAA3B,GAAC,OAAI,EAAK2B,SAAS3B,IAC7BI,KAAK,UACLwB,YAAY,WACZvB,MAAOJ,KAAKJ,MAAMC,QAClB+B,GAAG,UACHP,MAAOrB,KAAKL,MAAMkC,gBAGtB,yBAAKR,MAAOrB,KAAKL,MAAMmC,eACrB,2BACEC,KAAK,SACLC,UAAU,EACVL,YAAY,OACZvB,MAAOJ,KAAKJ,MAAME,KAClBuB,MAAOrB,KAAKL,MAAMsC,aAGtB,yBAAKZ,MAAOrB,KAAKL,MAAMuC,gBACrB,2BACEH,KAAK,SACLJ,YAAY,QACZK,UAAU,EACV5B,MAAOJ,KAAKJ,MAAMA,MAClByB,MAAOrB,KAAKL,MAAMwC,mB,GAjERC,cCSFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,SD6H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df8b9213.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nclass Pincode extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pincode: \"\",\n      city: \"\",\n      state: \"\"\n    };\n  }\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n    if (e.target.value.length === 6) {\n      axios\n        .get(`https://api.postalpincode.in/pincode/${e.target.value}`)\n        .then(res =>\n          this.setState({\n            state: res.data[0].PostOffice[0].State,\n            city: res.data[0].PostOffice[0].Region\n          })\n        )\n        .then(() => {\n          document.getElementById(\"pincode\").classList.remove(\"error\");\n        })\n        .catch(err => {\n          document.getElementById(\"pincode\").className = \"error\";\n        });\n    }\n    if (e.target.value.length < 6) {\n      this.setState({\n        city: \"\",\n        state: \"\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div style={this.props.Container}>\n        <div style={this.props.pincodeContainer}>\n          <input\n            maxLength={6}\n            minLength={6}\n            onChange={e => this.onChange(e)}\n            name=\"pincode\"\n            placeholder=\"Pin Code\"\n            value={this.state.pincode}\n            id=\"pincode\"\n            style={this.props.pincodeInput}\n          />\n        </div>\n        <div style={this.props.cityContainer}>\n          <input\n            type=\"String\"\n            disabled={true}\n            placeholder=\"City\"\n            value={this.state.city}\n            style={this.props.cityInput}\n          />\n        </div>\n        <div style={this.props.stateContainer}>\n          <input\n            type=\"String\"\n            placeholder=\"State\"\n            disabled={true}\n            value={this.state.state}\n            style={this.props.stateInput}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default Pincode;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}